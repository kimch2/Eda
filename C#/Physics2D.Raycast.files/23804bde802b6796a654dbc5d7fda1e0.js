if(! window.NT_RMD_AUD_ITEMS){window.NT_RMD_AUD_ITEMS = {};};(function(item){window.NT_RMD_AUD_ITEMS[item.source_key] = item;if(window.NT_RMD_AUD_CORE_ENGINE){window.NT_RMD_AUD_CORE_ENGINE.run();}})({"id":77827,"user_id":19535,"source_key":"23804bde802b6796a654dbc5d7fda1e0","rss_feeds":[{"id":67886,"site_url":"http://kan-kikuchi.hatenablog.com/","site_title":"(:3[kanのメモ帳]","favicon":"http://cdn.image.st-hatena.com/image/favicon/c21e5a502653d67bdc522bbb84d211149048707e/version=1/http%3A%2F%2Fcdn.mogile.archive.st-hatena.com%2Fv1%2Fimage%2Fkan_kikuchi%2F297789263919182453.png"}],"html_template":null,"carousel_settings":{"id":1963,"tag_id":77827,"cell_num":1,"image_position":"left","border_outside_width":0,"border_outside_color":null,"show_side":"0","cell_align":"left","slidewarp":false,"show_navigations":true,"nav_color":"#000080","show_next_prev_btn":true,"btn_color":"#000080","btn_allow_color":"#ffffff","autoslide":100.0,"nav_style":""},"popup_settings":null,"recommends":[{"id":1073318898,"title":"テクスチャの使用メモリを176MB減らしてみた【Unity】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/ReduceMemory","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151125/20151125134300.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151126/20151126133528.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151126/20151126133606.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151126/20151126134652.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151126/20151126134118.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151125/20151125135407.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151125/20151125135511.png"],"defaultimage":null,"content":"この記事でのバージョン Unity 5.2.2f1 Personal Xcode 7.1 はじめに ある時、作ってるゲームのメモリ使用量を確認したらえらい事になっていました。 使用メモリ 331MB 主な原因はテクスチャで、単純に量も多いしサイズも大きかったのですが、色々と改善したら使用メモリを結構減らす事が出来たので、今回はその方法をまとめた記事です。 この記事でのバージョン Unity 5.2.2f1 Personal Xcode 7.1 はじめに ある時、作ってるゲームのメモリ使用量を確認したらえらい事になっていました。 使用メモリ 331MB 主な原因はテクスチャで、単純に量も多いしサイズも大きかったのですが、 色々と改善したら使用メモリを結構減らす事が出来たので、今回はその方法をまとめた記事です。 使用メモリの確認方法 今回、使用メモリの確認はXcodeで行いました。 確認方法はアプリ実行中に、左側のメニューからMemoryを選ぶだけです。 なお、使用した端末はiPhone 6s Plusです。 Xcode以外にも以下のようなものを使って確認する方法もあります。 AllocationStats - Unify Community Wiki テクスチャの設定 何はともあれテクスチャの設定が重要です。 Read/Write Enabled テクスチャデータにスクリプトからアクセスできるようにする項目ですが、 なんと、これを有効にしていると必要なメモリ量が倍になります。 作成されたテクスチャデータは、テクスチャアセットとして必要なメモリ量は倍となります。必ず必要な場合のみ使用してください。 普通は無効になっているはずなのですが、以前これを自動で有効にしてしまってました。 必要な時だけ有効にしましょう。 Max Size 画像の最大サイズを決めるMax Sizeも出来るだけ小さくした方がもちろんいいです。 NGUIのアトラスならサイズを小さくしても、劣化するだけで表示するサイズは変わらないので 気にならない範囲で小さくしましょう。 間違っても1色の背景に1024とか指定しないように、 すいませんすいません。 というか1色なら画像の必要すらないという……。 Format Formatも重要で、使用する画像によって最適なものを選ぶ必要があります。 間違っても全部Tru","date":1448839738,"like":10,"rt":0,"hateb":2,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151125/20151125134300.png","display_order":0},{"id":1077456067,"title":"素材系のおすすめAsset38選【Unity】【アセット】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/Asset40","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213171948.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213172513.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213173206.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213173615.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213174232.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213175239.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213175836.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213180031.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213181106.png"],"defaultimage":null,"content":"目次 目次 はじめに BGM Hitori Yubin Sound Pack Game Music Pack - SUITE RPG BGM Pack for Unity Game Music Pack JAPANESE SAMURAI MUSIC PACK Grand Orchestra Collection Vol.1 Orchestral RPG Music Set SE Universal Sound FX Game Sound FX Pack 500+Magic SoundFX GameMusicSound - Weapon Sounds Pack Katana Sound SFX … 目次 目次 はじめに BGM Hitori Yubin Sound Pack Game Music Pack - SUITE RPG BGM Pack for Unity Game Music Pack JAPANESE SAMURAI MUSIC PACK Grand Orchestra Collection Vol.1 Orchestral RPG Music Set SE Universal Sound FX Game Sound FX Pack 500+Magic SoundFX GameMusicSound - Weapon Sounds Pack Katana Sound SFX UI & Item Sound Effect Jingles Coin SFX Win Lose Music Jingles 2Dキャラクター 2D Creature Pack 2D Character Pack 2D Samurai Soccer Pack 2D Fantasy Art Assets Full Pack Character Pack: Warriors 3Dモデル \"Unity-chan!\" Model Cu Cat, Cu Puppy Game Asset Studio CrossRoad_kimys2848 ONE OR EIGHT inc Coin Set 01 (Mobile) エフェクト Cartoon FX Pack FX Quest Dynamic Elements Effect Pack Quest and RPG FX Realistic Effec","date":1450307512,"like":2,"rt":0,"hateb":9,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151213/20151213223653.png","display_order":0},{"id":1073318901,"title":"最近アプデorリリースしたアプリのサイズがiOS9では大きく表記されている件【iOS】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/BokuranoDooorz","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151117/20151117202737.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151117/20151117202659.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151117/20151117202707.png","http://cdn.image.st-hatena.com/image/scale/b5704f5549f904215e8b30837db9082788d68d85/enlarge=0;height=200;version=1;width=200/http%3A%2F%2Fis4.mzstatic.com%2Fimage%2Fthumb%2FPurple69%2Fv4%2Fbc%2Fa9%2Fd3%2Fbca9d37d-fc6e-e579-d2c2-676c44c71330%2Fsource%2F100x100bb.jpg","/images/theme/itunes/itunes-badge-appstore@2x.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151117/20151117203553.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151117/20151117203843.png","http://cdn.image.st-hatena.com/image/scale/a21da43f871420e16a5663134efcea2ed88d3414/enlarge=0;height=200;version=1;width=200/http%3A%2F%2Fis1.mzstatic.com%2Fimage%2Fthumb%2FPurple69%2Fv4%2Fc5%2Fe1%2Fd6%2Fc5e1d6a0-0007-0d28-b987-fa38c505127a%2Fsource%2F100x100bb.jpg","/images/theme/itunes/itunes-badge-appstore@2x.png"],"defaultimage":null,"content":"はじめに タイトルの通りなのですが、どうやら2015年11月15日付近にアプデorリリースしたアプリのサイズが大きく表記されているっぽいです。 例えば2015年11月15日にアップデートされた「ぼくらの秘密基地」というアプリでは、Mac、iOS7のiPhone、iOS9のiPhoneそれぞれで確認した場合、iOS9だけ3倍以上のサイズとなっています。 Mac iOS7 iOS9 ぼくらの秘密基地COCOSOLA Inc.ゲーム無料 さらに謎なのが、表記上100MBを超えているのに4G回線でダウンロード出来てしまいます。 開発環境は関係ない？ 2015年11月16日にアップデートされた「Chro… はじめに タイトルの通りなのですが、どうやら 2015年11月15日付近にアプデorリリースしたアプリのサイズが大きく表記されているっぽいです。 例えば2015年11月15日にアップデートされた「ぼくらの秘密基地」というアプリでは、 Mac、iOS7のiPhone、iOS9のiPhoneそれぞれで確認した場合、 iOS9だけ3倍以上のサイズとなっています。 Mac iOS7 iOS9 ぼくらの秘密基地 COCOSOLA Inc. ゲーム 無料 さらに謎なのが、表記上100MBを超えているのに4G回線でダウンロード出来てしまいます。 開発環境は関係ない？ 2015年11月16日にアップデートされた「Chrome」でも、 Mac、iOS9のiPhone(iOS7はMacとほぼ同じなので省略)それぞれで確認した場合、 iOS9は15MBほどサイズが増えています。 Mac iOS9 Chrome - Google のウェブブラウザ Google, Inc. ユーティリティ 無料 Chromeも増えているということは、 開発環境が原因ではないっぽいです。(最初Unityを疑ってましたすいませんすいません) 時期？ 最終アップデートが2015年05月01日とちょっと前の「DOOORS ZERO」というアプリでは、 Mac、iOS9のiPhoneそれぞれで確認した場合、サイズは同じでした。 Mac iOS9 脱出ゲーム　DOOORS ZERO 58works ゲーム 無料 なので、最近アプデorリリースしたアプリだけで起きているような気がします。 しかし、最近アプデorリリースしたアプリ","date":1447763448,"like":5,"rt":0,"hateb":6,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151117/20151117202707.png","display_order":0},{"id":1073318900,"title":"Unityで作ったアプリが実機で文字化けした話【Unity】【デバッグ】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/Font_Fallback","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151106/20151106134922.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151106/20151106134928.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151109/20151109134145.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151109/20151109134307.png"],"defaultimage":null,"content":"この記事でのバージョン Unity 4.6.3f1 Unity 5.1.0f3 Personal はじめに 今回はUnityエディタ上では大丈夫だったのに、実機に入れたら文字化けした。という話です。NGUIでもuGUIでもそれ以外でも、iOSでもAndroidでも起こりうる現象っぽいです。 文字化けすると以下のようにマルチバイトの文字が？になります。 Unityエディタ上 iPhone上 なお、この時使用したフォントはArialで、Unity 4.6.3f1でも5.1.0f3でも発生しました。また実機のOSはiOS9です。 原因 この記事でのバージョン Unity 4.6.3f1 Unity 5.1.0f3 Personal はじめに 今回はUnityエディタ上では大丈夫だったのに、実機に入れたら文字化けした。 という話です。NGUIでもuGUIでもそれ以外でも、iOSでもAndroidでも起こりうる現象っぽいです。 文字化けすると以下のようにマルチバイトの文字が？になります。 Unityエディタ上 iPhone上 なお、この時使用したフォントはArialで、 Unity 4.6.3f1でも5.1.0f3でも発生しました。また実機のOSはiOS9です。 原因 この文字化けの原因は以下の場合と同じです。 iOS 8.2 以降でデバイス内蔵の日本語フォントを使用すると、これに失敗し、フォールバックとして中国語フォント (Heiti) が使用されるという現象が発生します。 つまりArialにマルチバイトの文字が無く、 代わりとして別のフォントを使おうとしたら上手くいってなかったという事です。 以前は問題無かったので、iOSの仕様変更の影響でしょうかね。 対処法1 この問題への対処法で一番簡単なのは日本語が入ったフォントを使う事です。 日本語に対応したフォントを自分でインポートして使えば フォールバックが発生しないはずなので、問題も起きません。 対処法2 二つ目の対処法は先ほどの記事にもあった、 フォールバックとして使用するフォントを指定することです。 フォールバックはフォントファイルのFontNamesで指定します。 上記の画像はデフォルトとは別にArialのフォントをインポートし、 .Hiragino Kaku Gothic Interfaceをフォールバックに指定した","date":1448235312,"like":4,"rt":0,"hateb":2,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151106/20151106134928.png","display_order":0},{"id":1073318907,"title":"Xcode7 + iOS9 だと ATSが原因で広告が出なかった話【iOS】【デバッグ】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/ATS","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151026/20151026134453.png"],"defaultimage":null,"content":"この記事でのバージョン Xcode 7.1 はじめに Xcode7でビルドした所、iOS9で広告が表示されなくなってしまったので、色々調べてみた所、ATSが原因で通信が遮断されていました。 以下の記事を参考にATSを無効にした所、表示されました。 内容はほぼ重複していますが、一応メモとして残します。 この記事でのバージョン Xcode 7.1 はじめに Xcode7でビルドした所、iOS9で広告が表示されなくなってしまったので、 色々調べてみた所、ATSが原因で通信が遮断されていました。 以下の記事を参考にATSを無効にした所、表示されました。 内容はほぼ重複していますが、一応メモとして残します。 ATS(App Transport Security ) まずATSってなんぞやって所からですが。 ATS が有効の場合、HTTP での通信はできません。 また、Apple が推奨する必要条件を満たさない接続は強制的に接続失敗扱いになります。 との事で、セキュアにする為には有効だとは思いますが、 各方面が対応してくれるまでは使えなさそう……。 ちなみにATSで通信をブロックされると以下のようなメッセージが表示されます。 App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file. ATS無効 ATSを無効にするにはInfo.plistにNSAppTransportSecurityというDictを作り、 さらにその中にNSAllowsArbitraryLoadsというDictを作成、 さらにさらにその中にAllows Arbitrary LoadsというkeyでBool値のYESを登録するだけです。 また、NSAppTransportSecurityを使う事で個別に許可を出す事も可能なようです。 XcodeProjectUpdater Unityで開発したアプリの話になりますが、 以前作成した、Xcodeプロジェクトの自動設定を行うXcodeProjectUpdaterに ATSの自動設定を追加しました","date":1446072123,"like":3,"rt":0,"hateb":2,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151026/20151026134453.png","display_order":0},{"id":1076503205,"title":"Scripting Define Symbolsを劇的に使いやすくするエディタ拡張【Unity】【エディタ拡張】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/ScriptingDefineSymbolsEditor","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151130/20151130135908.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151201/20151201132926.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151201/20151201132938.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151201/20151201132938.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151202/20151202135151.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151203/20151203133559.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151203/20151203133728.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151203/20151203133844.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151203/20151203134234.jpg"],"defaultimage":null,"content":"エディタ拡張とは この記事でのバージョン Unity 5.2.2f1 Personal 目次 目次 はじめに Scripting Define Symbols 導入 使い方 シンボルの追加、削除 Symbolに対応する値 Symbolの無効と削除 Reset All Invalid All Valid All Delete 設定ファイルの保存場所 クラス DefineSymbol SymbolEditor SymbolEditorWindow DefineValue ConstantsClassCreator 要点 読み込み 表示 編集 保存 おわりに はじめに 2015年の記事100本目！そ… エディタ拡張とは この記事でのバージョン Unity 5.2.2f1 Personal 目次 目次 はじめに Scripting Define Symbols 導入 使い方 シンボルの追加、削除 Symbolに対応する値 Symbolの無効と削除 Reset All Invalid All Valid All Delete 設定ファイルの保存場所 クラス DefineSymbol SymbolEditor SymbolEditorWindow DefineValue ConstantsClassCreator 要点 読み込み 表示 編集 保存 おわりに はじめに 2015年の記事100本目！そしてUnity Advent Calendar 2015 14日目！ 前回、13日目はShaulaさんのUnityで各種定数を定義して使うでした。 定数と言えば、今回の記事でも使っている ConstantsClassCreatorが定数クラスを自動生成するためのクラスだったりします……！ さてさてそんな今回はScripting Define Symbolsを劇的に使いやすくするエディタ拡張の話です。 ※これは個人の感想であり感じ方には個人差があります( ´・◡・｀)b Scripting Define Symbols UnityではScripting Define Symbolsを使う事で、プロジェクト内で共通のシンボルを定義できます。 そんなもんは知らんという方は、以下の記事を参照の事。 ただこのScripting Define Symbolsには以下のような欠点があり、正直使い難い","date":1450047169,"like":3,"rt":0,"hateb":1,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151201/20151201132938.png","display_order":0},{"id":1073318902,"title":"スプラッシュの表示が終わってから処理を行う【Unity】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/isShowingSplashScreen","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151112/20151112133642.gif","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151112/20151112134459.gif"],"defaultimage":null,"content":"この記事でのバージョン Unity 5.2.2f1 Personal はじめに アプリ起動後、すぐに処理を開始したらスプラッシュがまだ表示されているため、表示が上手くいかないなんてことありますよね。 例えば、Unity無料版だけどロゴ表示したい！って事でスプラッシュの後にロゴを表示しようとしてみた結果、 この記事でのバージョン Unity 5.2.2f1 Personal はじめに アプリ起動後、すぐに処理を開始したら スプラッシュがまだ表示されているため、表示が上手くいかないなんてことありますよね。 例えば、Unity無料版だけどロゴ表示したい！ って事でスプラッシュの後にロゴを表示しようとしてみた結果、 スプラッシュ表示中にフェードイン&ロゴ表示時間が過ぎて ロゴがほとんど見えずに次のシーンへ移動してしまっています。 こうならないように一定時間置いてから処理を開始しようとしても、 端末の処理能力によってスプラッシュの表示時間が異なるので、綺麗に実行出来なかったりします。 isShowingSplashScreen そんな時に使えるのが、isShowingSplashScreenです。 これがどういうものかと言うと、以下の通りです。 スプラッシュ画面が表示されているか確認します。 アプリケーションが現時点でスプラッシュスクリーンを表示している場合は true を返します。 ちなみに使えるのはUniy5.2からです。 このisShowingSplashScreenを以下のようにUpdateで使う事で、 スプラッシュ表示が終わってから処理を行うことができます。 private void Update() {\n  if (!Application.isShowingSplashScreen) {\n    //スプラッシュ表示後\n  }\n}\n これを使って先ほどのロゴ表示をやってみた所、 いい感じに出来るようになりました。 なお、UnityEditor上ではスプラッシュ表示はありませんが、 起動してから表示されるまでのラグがあるため上手くいきませんのであしからず。 おわりに これのためだけにUnityをアプデしたぐらい、待ち望んでいた機能でした。 ちなみに他のUnity5.2の新機能などはこちらから見られます。","date":1447628947,"like":2,"rt":0,"hateb":2,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151112/20151112134459.gif","display_order":0},{"id":1079709312,"title":"Status Bar Hidden にチェックを入れてるのにステータスバーが表示される場合の対処法【Unity】【iOS】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/iOSStatusBar","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151210/20151210134406.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151210/20151210134729.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151210/20151210135051.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151210/20151210135032.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151210/20151210135317.png"],"defaultimage":null,"content":"この記事でのバージョン Unity 5.2.2f1 Personal Xcode 7.1.1 はじめに 今回はタイトル通り、Status Bar Hidden にチェックを入れてるのにステータスバーが表示される場合の対処法 Status Bar Hidden この記事でのバージョン Unity 5.2.2f1 Personal Xcode 7.1.1 はじめに 今回はタイトル通り、 Status Bar Hidden にチェックを入れてるのにステータスバーが表示される場合の対処法 Status Bar Hidden UnityからXcodeプロジェクトを書き出す際に Playser SettingsのStatus Bar Hiddenにチェックを入れるとステータスバーが表示されなくなります。 これでXcodeプロジェクトのDeployment InfoのHide Status Barにチェックを入れ Info.plistのStatus bar is initially hiddenにYESを設定している状態になります。 これで基本的にステータスバーは表示されませんが、 完全に表示されなくなったわけではないみたいです。 View controller-based status bar appearance 上記の状態になっても、広告を表示した時(UIViewControllerを新規に作成した場合？)など、 場合によっては表示されてしまうようです。 そんな時はInfo.plistのView controller-based status bar appearanceをNOに設定 なお、View controller-based status bar appearanceはデフォルトではInfo.plistにないようです。 XcodeProjectUpdater 以前紹介した、Xcodeプロジェクトの自動設定を行うXcodeProjectUpdaterに 今回紹介したステータスバーの表示or非表示の自動設定を追加しました。","date":1450915800,"like":1,"rt":0,"hateb":2,"sitename":"(:3[kanのメモ帳]","subimage":null,"display_order":0},{"id":1073318897,"title":"iOS9でcanOpenURLを使う【iOS】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/iOS9_canOpenURL","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151111/20151111135621.png"],"defaultimage":null,"content":"この記事でのバージョン iOS9.1 Xcode 7.1 はじめに 特定のアプリがインストールしているかを調べる時などに使うcanOpenURLですが、iOS9から以下のようなエラーが出るようになりました。 -canOpenURL: failed for URL: \"hoge://\" - error: \"This app is not allowed to query for scheme hoge\" これはATSの話と同様、仕様変更に原因があるようで、 ThirdPartyアプリがcanOpenURLを使用して、ユーザーがインストールしているアプリを調べることへの対策をしているようです。 と… この記事でのバージョン iOS9.1 Xcode 7.1 はじめに 特定のアプリがインストールしているかを調べる時などに使うcanOpenURLですが、 iOS9から以下のようなエラーが出るようになりました。 -canOpenURL: failed for URL: \"hoge://\" - error: \"This app is not allowed to query for scheme hoge\" これはATSの話と同様、仕様変更に原因があるようで、 ThirdPartyアプリがcanOpenURLを使用して、ユーザーがインストールしているアプリを調べることへの対策をしているようです。 との事らしいです。 canOpenURLの許可 残念ながら全てのcanOpenURLを許可する事は出来ないみたいです。 しかし、info.plistにLSApplicationQueriesSchemesを登録する事で、 特定のスキームだけを有効にする事は出来ます。 上記の画像のようにLSApplicationQueriesSchemesというkeyでArrayを作成し、 許可したいスキームをArrayの中に登録する事でそのスキームでcanOpenURLが出来るようになります。 XcodeProjectUpdater Unityで開発したアプリの話になりますが、 以前作成した、Xcodeプロジェクトの自動設定を行うXcodeProjectUpdaterに ApplicationQueriesSchemesの自動設定を追加しました。 おわりに 指定したスキームならcanOpenURLを有","date":1449096474,"like":2,"rt":0,"hateb":1,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151111/20151111135621.png","display_order":0},{"id":1073318899,"title":"An asset is marked as dont save, but is included in the build.【Unity】【NGUI】【デバッグ】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/An_asset_is_marked_as_dont_save","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151104/20151104134901.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151104/20151104135008.png"],"defaultimage":null,"content":"この記事でのバージョン Unity 5.1.0f3 Personal NGUI 3.9.4b 参考記事 Unity3D:iOSビルド時に見慣れないエラーメッセージ - devlog [naru design] はじめに 今回はNGUIを使っているプロジェクトをiOS向けにビルドし、An asset is marked as dont save, but is included in the build. と表示された時に対処した方法です。 この記事でのバージョン Unity 5.1.0f3 Personal NGUI 3.9.4b 参考記事 Unity3D:iOSビルド時に見慣れないエラーメッセージ - devlog [naru design] はじめに 今回はNGUIを使っているプロジェクトをiOS向けにビルドし、 An asset is marked as dont save, but is included in the build. と表示された時に対処した方法です。 Lucida 原因はUILabelのフォントをLucida〜にしている事でした。 これを他のフォントに変えるだけでエラーは出なくなります。 ただしiOS9でArialを使う場合は文字化けを起こす事があるので注意が必要です。 詳細は以下の記事で。","date":1448492064,"like":2,"rt":0,"hateb":1,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151104/20151104134901.png","display_order":0},{"id":1073318904,"title":"特定のスクリプトのWarningを非表示にする【Unity】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/WarningDisable","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151028/20151028133403.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151028/20151028134456.jpg"],"defaultimage":null,"content":"この記事でのバージョン Unity 5.1.0f3 Personal はじめに UnityのConsoleに表示されるWarningは右上の！アイコンを押せば非表示に出来ます。 ただこれだと、全て表示されなくなってしまいます。 諸事情で特定のスクリプトだけWarning消せないかなーと調べてた所、ありました。 内容はほぼ重複していますが、一応メモとして残します。 この記事でのバージョン Unity 5.1.0f3 Personal はじめに UnityのConsoleに表示されるWarningは右上の！アイコンを押せば非表示に出来ます。 ただこれだと、全て表示されなくなってしまいます。 諸事情で特定のスクリプトだけWarning消せないかなーと調べてた所、ありました。 内容はほぼ重複していますが、一応メモとして残します。 warning disable スクリプト毎にWarningを消す方法は簡単で、スクリプトの一番上に warning disableを使って以下のように書くだけです。 #pragma warning disable 0162\n 0162というのが非表示にしたいwarningの番号で、 Consoleに表示されたwarningに書いてある数字です。 なお、errorとwarningの番号一覧はこちらにあります。 おわりに ちなみに非表示にしたかったwarningというのは0162(到達不能コード)で、 以下のような場合に発生します。 #if UNITY_IPHONE\n    return;\n#endif\n\n//なんか処理 \n 処理部分を!UNITY_IPHONEで囲めばいいだけじゃん、と 後になって気付き、結局warning disable使わずにすみましたとさ。","date":1447024089,"like":2,"rt":0,"hateb":1,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151028/20151028133403.jpg","display_order":0},{"id":1073318906,"title":"PlayerPrefsでListやDictionaryの保存【Unity】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/PlayerPrefsUtility","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151023/20151023133346.png"],"defaultimage":null,"content":"この記事でのバージョン Unity 5.1.0f3 Personal はじめに PlayerPrefsは直接ListやDictionaryの保存が出来ません。なので今回はPlayerPrefsでListやDictionaryの保存する方法の紹介です。 この記事でのバージョン Unity 5.1.0f3 Personal はじめに PlayerPrefsは直接ListやDictionaryの保存が出来ません。 なので今回はPlayerPrefsでListやDictionaryの保存する方法の紹介です。 PlayerPrefsUtility ListやDictionaryをそのまま保存することは出来ないので、シリアライズする必要があります。 PlayerPrefsをもっと便利に使う | プラスクリエイティブ -Lab Blog- 上記の記事を参考にListやDictionaryをPlayerPrefsに保存出来る、PlayerPrefsUtilityを作ってみました。 PlayerPrefsUtilityの使い方は以下の通りです。 //てきとうにリストとディクショナリー作成\nList&lt;int&gt; saveList = new List&lt;int&gt; (){1, 2, 3};\nDictionary&lt;string, int&gt; saveDict = new Dictionary&lt;string, int&gt; (){\n  {\"key1\", 1}, {\"key2\", 2}, {\"key3\", 3}\n};\n\n//保存\nPlayerPrefsUtility.SaveList&lt;int&gt;         (\"ListSaveKey\", saveList);\nPlayerPrefsUtility.SaveDict&lt;string, int&gt; (\"DictSaveKey\", saveDict);\n\n//読み込み\nList&lt;int&gt; loadList               = PlayerPrefsUtility.LoadList&lt;int&gt;         (\"ListSaveKey\");\nDictionary&lt;string, int&gt; loadDict = PlayerPrefsUtilit","date":1446420183,"like":1,"rt":0,"hateb":2,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20150104/20150104084904.png","display_order":0},{"id":1074365500,"title":"NGUIでボタンなどを押さなかった時のタッチイベントを取得する【Unity】【NGUI】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/FallThroughCatcher","images":null,"defaultimage":null,"content":"この記事でのバージョン Unity 5.2.2f1 Personal NGUI 3.9.2 はじめに ボタンなどが無いところのタップを処理したいって場合ありますよね。例えば、画面をタップして次のシーンへとかそんな感じの時です。 NGUIではそんな時にUICamera.fallThroughを使うと便利です。。UICamera.fallThroughとは以下の通りで、 どのUICameraから見てもタッチできるオブジェクトがなかった場合に、このfallThroughで指定したGameObjectにメッセージが飛ぶようになります 以下のようにGameObjectをfallThroughに登録すると… この記事でのバージョン Unity 5.2.2f1 Personal NGUI 3.9.2 はじめに ボタンなどが無いところのタップを処理したいって場合ありますよね。 例えば、画面をタップして次のシーンへとかそんな感じの時です。 NGUIではそんな時にUICamera.fallThroughを使うと便利です。。 UICamera.fallThroughとは以下の通りで、 どのUICameraから見てもタッチできるオブジェクトがなかった場合に、このfallThroughで指定したGameObjectにメッセージが飛ぶようになります 以下のようにGameObjectをfallThroughに登録すると、 いちいちColliderを設定しなくてもタッチを取得できる優れもの。 UICamera.fallThrough = gameObject;\n ただ、このfallThroughを受け取れるオブジェクトは一つだけなので、 そのまま使ってしまうと一つのクラスが肥大化してしまいそうです。 そこで、fallThroughを受け取るクラスにタッチイベントが起こった時に実行するEventを作成し、 そのEventに他のクラスからメソッドを登録するようにしてみました。 具体的にいうと以下のような感じ private void Start(){\n  //イベントにメソッドを登録\n  FallThroughCatcher.Instance.onPressStart += OnPressStart;\n}\n\n//タップした瞬間に実行される\nprivate void OnPressStart(){\n  ","date":1449442443,"like":1,"rt":0,"hateb":1,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn.mogile.archive.st-hatena.com/v1/image/kan_kikuchi/297789263919372451.png","display_order":0},{"id":1075282546,"title":"Unityで共通のdefineを定義する【Unity】【C#】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/ScriptingDefineSymbols","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151104/20151104135759.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151104/20151104135808.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151127/20151127133506.jpg","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151202/20151202135151.png"],"defaultimage":null,"content":"この記事でのバージョン Unity 5.2.2f1 Personal はじめに C#では#defineでシンボルを定義し、#unddef でシンボルを未定義にする事ができます。 シンボルを使えば以下のように、定義されているシンボルによって処理を変更できます。 なお、無効になっている場所はコンパイルもされません。 ただ、このシンボルは宣言したスクリプト内でしか使えないという問題があります。 Scripting Define Symbols この記事でのバージョン Unity 5.2.2f1 Personal はじめに C#では#defineでシンボルを定義し、#unddef でシンボルを未定義にする事ができます。 シンボルを使えば以下のように、 定義されているシンボルによって処理を変更できます。 なお、無効になっている場所はコンパイルもされません。 ただ、このシンボルは宣言したスクリプト内でしか使えないという問題があります。 Scripting Define Symbols UnityではScripting Define Symbols を使う事で、シンボルをプロジェクト全体に反映できます。 Scripting Define SymbolsはPlayerSettings - Other Settingsから設定できます。 なお、複数設定したい場合は DEBUG;DEBUG_HOGE のように;区切りにすればOKです。 Scripting Define Symbolsの問題点 Scripting Define Symbolsを使う事で共通のdefineを定義する事はできますが、 正直かなり使い難いです。 欠点としては以下のような事が挙げられます。 全プラットフォームに一括設定ができない 羅列されるので設定されてる項目がわかり難い なんのシンボルか説明をコメントでかけない 未定義にする場合消すので、再設定がめんどい また、CやC++のように、定数が設定できないのも地味に不便だったりします。 //Cでのdefineを使った定数宣言\n#define WIDTH 640\n こういう場合、エディタ拡張で使い易くしよう！ みたいになると思うのですが、すでに先人がいらっしゃいました。 定数の話を除けば、上記を使う事でかなり楽になりますね！ おわりに 実を言うと、上記の記事を発見する前","date":1449703750,"like":1,"rt":0,"hateb":1,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151104/20151104135808.png","display_order":0},{"id":1078733744,"title":"GameWindowの設定が変わった時に処理を行う【Unity】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/UIAdjuster","images":["http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151209/20151209134347.png","http://cdn-ak.f.st-hatena.com/images/fotolife/k/kan_kikuchi/20151210/20151210133443.gif"],"defaultimage":null,"content":"この記事でのバージョン Unity 5.2.2f1 Personal はじめに 画面のアス比によって位置やサイズ調整などの処理をしたいって時、いちいちゲームを再生するのは面倒ですよね。 今回はそんな時に使える方法で、GameWindowのサイズを変えた時に処理を実行する方法です。 この記事でのバージョン Unity 5.2.2f1 Personal はじめに 画面のアス比によって位置やサイズ調整などの処理をしたいって時、 いちいちゲームを再生するのは面倒ですよね。 今回はそんな時に使える方法で、 GameWindowのサイズを変えた時に処理を実行する方法です。 ExecuteInEditMode 一番の問題はUnityを再生していない時の処理方法ですが、 ExecuteInEditModeを使う事で簡単に実現できます。 using UnityEngine;\nusing System.Collections;\n\n[ExecuteInEditMode] //これだけ！\npublic class NewBehaviourScript1 : MonoBehaviour {\n\n}\n Unity - スクリプトリファレンス: ExecuteInEditMode UIAdjuster んでExecuteInEditModeを使って作ったのが以下の アス比に合わせてUIの位置やサイズを調整するクラス、UIAdjuster。 実際のUI調整はAdjustUIの中で行います。 上記コードではアス比をログで出しているだけなので、以下のような感じになります。 UIAdjusterの仕組みは至極単純で、アス比を保持しておいて Updateのタイミングでアス比に変更があればAdjustUIを実行しているだけです。 ただし、Updateは再生中とは違い、常に実行されるわけではなく Windowのサイズを変えた時など、特定のタイミングで実行されます。 なお、継承して使う前提なので各メソッドはprotected virtualになっています。 おわりに NGUI等を使っていれば、そんなにUIの調整は必要ないとは思うんですが、 どうしても細かい修正したい場合に使えるやつでした。","date":1450653178,"like":1,"rt":0,"hateb":1,"sitename":"(:3[kanのメモ帳]","subimage":null,"display_order":0},{"id":1073318903,"title":"日数や時間の保存、取得、計算【C#】【Unity】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/DateTime","images":null,"defaultimage":null,"content":"この記事でのバージョン Unity 5.1.0f3 Personal はじめに 今回は現在時刻を取得したり、経過日数を知りたい時の方法です。 この記事でのバージョン Unity 5.1.0f3 Personal はじめに 今回は現在時刻を取得したり、経過日数を知りたい時の方法です。 DateTime 時間関連の処理を行う時は以下のようにDateTimeを使います。 using System; //DateTimeを使うのに必要\n\n//現在時刻の取得\nDateTime now = DateTime.Now;\n このDateTimeを使うと計算も楽になります。 例えば経過日数を調べる場合は以下のような感じに。 //lastDateからnowへの経過日数　(lastDateとnowはDateTime)\nint day = now.Subtract (lastDate).Days;\n 他にも日数をすすませるAddDaysや曜日を取得するDayOfWeekなど便利なメソッドが揃っています。 詳しくは以下のサイトが分かり易かったです。 日時、時間の計算をする: .NET Tips: C#, VB.NET PlayerPrefsへ保存 時刻を保存しときたい、みたいな事もよくあると思いますが、 DateTimeはそのままPlayerPrefsを保存することはできません。 なので、ToBinaryを使ってバイナリ化したのち、ToStringを使ってstringで保存します。 //現在時刻の保存\nDateTime now = DateTime.Now;\nPlayerPrefs.SetString (\"Key\", now.ToBinary().ToString()); \n //保存していたデータの読み込み\nstring defult = new DateTime(2000, 1, 1, 16, 32, 0, DateTimeKind.Local).ToBinary().ToString();//保存していたデータが存在しない時用のデフォルト値\nstring dateTimeString = PlayerPrefs.GetString (\"Key\", defult);\n\nDateTime time  = System.DateTime.FromBinary (System.Convert.","date":1447282698,"like":1,"rt":0,"hateb":1,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn.mogile.archive.st-hatena.com/v1/image/kan_kikuchi/297789263919372451.png","display_order":0},{"id":1073318905,"title":"アプリの一時停止or終了時の処理【Unity】","rssid":67886,"url":"http://kan-kikuchi.hatenablog.com/entry/OnApplicationPause","images":null,"defaultimage":null,"content":"この記事でのバージョン Unity 5.1.0f3 Personal はじめに 今回はアプリを一時停止or終了する際にデータの保存やらポーズなどの処理を入れる方法の紹介です。 この記事でのバージョン Unity 5.1.0f3 Personal はじめに 今回はアプリを一時停止or終了する際に データの保存やらポーズなどの処理を入れる方法の紹介です。 OnApplicationPause アプリが一時停止、または再開された時に呼ばれるのがOnApplicationPauseというメソッドです。 //一時停止or再開時\nprivate void OnApplicationPause (bool pauseStatus){\n\n  //一時停止\n  if(pauseStatus){\n\n  }\n  //再開時\n  else{\n\n  }\n\n}\n iPhoneで言うとホームボタンを押した時等に一時停止が呼ばれる感じです。 OnApplicationQuit アプリが完全に終了した際に呼ばれるのがOnApplicationQuitというメソッドです。 //終了処理\nprivate void OnApplicationQuit (){\n}\n Application.Quit()などでアプリを終了する時に呼ばれますが、 iOSではアプリを終了する処理ってマズかったような気が……よく覚えてませんが。 また、アプリが終了する全ての場合で呼ばれるわけではないようです。 システムメニューやアプリ管理ツールを使って強制停止するようなケースにおいては呼ばれません。","date":1446678278,"like":1,"rt":0,"hateb":1,"sitename":"(:3[kanのメモ帳]","subimage":"http://cdn.mogile.archive.st-hatena.com/v1/image/kan_kikuchi/297789263919372451.png","display_order":0}],"name":"関連","note":"","line":"0","sort_type":"buzz","limit":20,"template":"multi-product","theme":"","title_color":"#000080","title_bg_color":"#000080","article_text_color":"","article_bg_color":"","border_color":"#000080","border_width":1,"border_radius":5,"count_color":"#000000","count_bg_color":"#ffffff","article_size":2,"image_size":{"article_image_size":"2","article_image_vertical_size":"2"},"display_adjustment":{"display_adjustment":"default","display_adjustment_size":0,"display_vertical_size":0},"target_blank":1,"display_publishdate":1,"display_share":0,"display_content":0,"admaxlite":0,"sensitive_judge":1,"sensitive_at":1450984762000,"created_at":1449147422000,"updated_at":1450359017000,"use_display_priority":true,"hide_future_article":false,"article_take_days":60,"theme_id":0,"title_bg_opacity":"0.8","count_bg_opacity":"1","article_vertical_size":3,"display_effect":"","font_size":"default","icon_show":false,"icon_url":"","favicon_show":false,"ranking_show":false,"new_show":false,"new_time":360,"title_show":"title","title_count":0,"margin_top":5,"margin_bottom":5,"margin_left":5,"margin_right":0,"display_publishtime":false,"rss_image_only":true,"new_color":"#FF0000","min_article_width":0,"date_color":"","col_size":4,"user_life":1851224,"mouse_over":true,"version":2.0});

