
参考：http://www.atmarkit.co.jp/fdotnet/csharp20/csharp20_05/csharp20_05_02.html

匿名メソッドの特徴
	・匿名メソッドは上位スコープにアクセスできる
	・外部変数を参照している場合は外部変数のキャプチャが発生する。
	●外部変数のキャプチャ
	　→匿名メソッドが外部変数を参照している時、外部変数の寿命を
	　　匿名メソッドが参照するデリゲートがGCできる状態になるまで延命すること
	・型が確定しないアバウトな状態では匿名メソッドもラムダ式も使えない

	// ==================================================
	// Actionを使ってdelegate型宣言をしない例
	// ==================================================
	class Program
	{
	  static void Main(string[] args)
	  {
            string message = "Hello! World!";

            // Actionは【戻り値なし引数なし】のdelegate型だがジェネリック対応なので
            // string型引数のメソッドの場合はジェネリックでstringを指定できる
	    Action<string> action = delegate(string message)
	    {
	      Console.WriteLine(message); // messageは上位スコープの変数
	    };

            // デリゲート実施。actionメソッドが無名関数をデリゲート(移譲)
	    action("Hello! World!"); // 出力：Hello! World!
	  }
	}

この場合、変数messageはMainメソッドに属する変数であり匿名メソッドには属していない。
しかし、匿名メソッドは上位スコープにアクセスできるので、変数messageの内容を出力することができる。
この特徴は非常に重要である。
なぜなら必要とされるあらゆる情報を引数経由で渡さずに済むので引数の肥大化が防げるのである。
また、引数が最小限に絞られることで少数のデリゲート型を使い回すだけで済んでしまうことも多くなる。

















