
public static class ArrayExtensions
{
    // ランダムに並び替えた新しい配列を返す
    public static T[] Shuffle<T>(this T[] array)
    {
        var length = array.Length;
        var result = new T[length];
        Array.Copy(array, result, length);
        
        var random = new Random();
        int n = length;
        while (1 < n)
        {
            n--;
            int k = random.Next(n + 1);
            var tmp = result[k];
            result[k] = result[n];
            result[n] = tmp;
        }
        return result;
    }
}

使用：
var array = new []{ 1, 2, 3, 4, 5 };
array = array.Shuffle();


別の処理↓
    // ----------------------------------------------------------------
    // シャッフル処理実施関数
    // ----------------------------------------------------------------
    private static void Fisher(int[] c)
    {
        int[] cardlist = c; //引数の配列を格納

        // 念のため何度かシャッフルを繰り返す
        for (int cnt = 0; cnt < 10; cnt++)
        {
            DeckList.cardlist = cardlist.OrderBy(i => Guid.NewGuid()).ToArray();
        }
    }


