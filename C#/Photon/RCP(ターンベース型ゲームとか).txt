
参考：http://chronote.hatenablog.com/
　　　http://summer-gift.hatenablog.com/entry/2015/06/09/224951

・PhotonView の同期は、ルーム内共通の同一オブジェクト（ViewID）に対してやりとりされる。

・RPCの引数にobject型は使用できない

・OnPhotonSerializeViewはマスタークライアントが管理しているため
　マスタークライアント以外は値の書き込みは出来ない

・各クライアントの一致する PhotonView に対して行われるため、
　シーンロード中に呼び出す時など、状況が揃わない場合は実行されない。
　対策としては、シーンロード前にメッセージキューを停止させる。
　ロードが終わったらメッセージキュー停止を戻しておく。
	// これ以降のネットワークメッセージの処理を一時的に停止する
	PhotonNetwork.isMessageQueueRunning = false;
	Application.LoadLevel(levelName);

--------------------------------------------------
プレイヤーCPとルームCPの親クラス
--------------------------------------------------
ルームCP：RoomOptionsの一部（RoomOptions.customRoomProperties / RoomOptions.customRoomPropertiesForLobby）
プレイヤーCP：PhotonNetworkクラスの一部（PhotonNetwork.customProperties）

--------------------------------------------------
ターン判定フラグの作り方
--------------------------------------------------
・ターン判定フラグ送受信するRPCメソッド2つ作る

    // 自身のphotonView
    public PhotonView photonView;
    // 自身のphotonViewを取得（photonViewコンポを最低一つはアタッチしていること）
    photonView = PhotonView.Get(this);
    // ------------------------------------------------------------------------
    // ターン判定受信メソッド
    // ------------------------------------------------------------------------
    [PunRPC]
    public void RecivedTurnRPC(bool turn, PhotonMessageInfo info)  // 正しい。
    public void RecivedTurnRPC(PhotonMessageInfo info, bool turn)  // 間違い。動かない。
    {
        Debug.Log("相手プレイヤーよりRPC受信");
    }
    // ------------------------------------------------------------------------
    // ターン判定送信メソッド
    // ------------------------------------------------------------------------
    [PunRPC]
    public void SendingTurnRPC()
    {
        // ターン判定フラグを送信（相手側をtrue）
        photonView.RPC("RecivedTurnRPC", PhotonTargets.Others, (bool)true);
    }

↓

・上記クラス(コンポ)をアタッチしたオブジェクトにPhotonViewをアタッチ

↓

・アタッチしたPhotonViewコンポのObserverの所にクラスコンポをアタッチ
　これによりPhotonNetworkViewの観察対象として設定されます。











