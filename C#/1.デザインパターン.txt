===========================================================
GoF（ギャング・オブ・フォー）23のデザインパターン
===========================================================

●ステートパターン
　→ある物についての各状態(State)をそれに対応した各クラスで表現する。
　　つまり状態1つにつき、クラス1つで表現する。
　　ステートパターンの最大の効果は「ifを減らせる」という事。
　　同じようなswitchやifが何度も出てくるような場合にはこのパターンを検討する理由としては十分。
　　参考：http://qiita.com/ms2sato/items/416dd5c2db88997deb0c

●テンプレートメソッド
　→複数のオブジェクトに共通した処理を基底クラスに書き、
　　固有の処理をサブクラスに書くデザインパターンのこと。

●ストラテジーパターン
　→処理をオブジェクト化し、アルゴリズムの切替えを容易にする。

●ファクトリメソッド
　→実際に生成されるインスタンスに依存しない、インスタンスの生成方法を提供する。

●イテレータ
　→複数の要素を内包するオブジェクトのすべての要素に順にアクセスする方法を提供する。反復子。

●Observerパターン
　→「観察者」を意味する単語。
　　あるインスタンスの状態が変化した際にそのインスタンス自身が「観察者」に状態の変化を「通知」する仕組み。
　　例えば、飛行機の搭乗券について考えて見ましょう。
　　飛行機の搭乗券を購入した人がキャンセルする必要に駆られた場合、航空会社に連絡してキャンセルする旨を伝えます。
　　各搭乗者を管理しているのは「航空会社」で、キャンセルを伝えるのは「搭乗者」となっています。
　　「搭乗者」は、チケットが欲しくなったり、いらなくなったりしたら「航空会社」に連絡します。
　　このような仕組みによって航空会社は全てのユーザを常に観察する必要からのがれられるのです。
　　このように、状態が変化する方が「通知」をする仕組みを持つことで観察者は常に観察しなければいけない状態から開放されます。
　　参考：http://www.techscore.com/tech/DesignPattern/Observer.html/

●シングルトン
　→あるクラスについて、インスタンスが単一であることを保証する。

●MVC（Model View Controller）
　→処理の中核を担う「Model」、表示・出力を司る「View」、
　　入力を受け取ってその内容に応じてViewとModelを制御する「Controller」
　　の3要素の組み合わせでシステムを実装する方式。
　　メインの処理はModelに実装し、Modelは画面出力などは行わない。
　　処理結果はViewに渡され、画面表示などが行われる。
　　ユーザからの入力はControllerが受け取り、何らかの処理が必要な場合は
　　Modelに依頼し、出力が必要な場合はViewに依頼する。
　　このように明確に機能ごとに分離することで、開発作業の分業が容易になり
　　また、互いに仕様変更の影響を受けにくくて済むようになる。

●WVVM（Model View ViewModel）
　→Model-View-ViewModelの3つの部分に分割して設計・実装する
　　ソフトウェアアーキテクチャパターン。
　　MVCの派生パターンであり、特にPresentation Modelパターンを
　　直接の祖先に持つ。
　　MVVMを考慮してアプリケーションを開発する目的は他のMVC系の
　　パターンと同様にアプリケーションの「プレゼンテーションとドメインを分離」
　　する事で、アプリケーション開発における保守性・開発生産性に寄与する事である。

