
・特定のインスタンスにではなくクラスに属するメンバー変数やメソッド(クラス変数とも)

・static キーワードをつけると静的メンバーになる

・静的変数、静的メソッドはクラスごとに唯一つの実体を持ち、すべてのインスタンスの間で共有されます

・そのため副作用がある。
　変数の中身がバグった場合、そのstaticクラスの変数を見ている箇所全てがバグる(実態が単一のため)

・StaticクラスおよびStatic変数はプログラム実行で初めて登場したときに割り当てられます。
　Staticクラスは実際にそのクラスの変数またはメソッドにアクセスするまで作成されることは絶対にない。

・staticを付けた変数は、プログラムの中に実体が1個しか作られない。
　そのためPersonクラスを使ってtaroとhanakoの2人分の情報を扱うというようなことはできなくなる

class Person // 人間クラス
{
  public string name; // 名前。個体ごとに違うので、インスタンス変数に。
  public int age;     // 年齢。同上、インスタンス変数に。

  public static string scientificName;
  // 学名。個体じゃなくて種によって決まるものなので、静的変数に。
}

===============================================================================================
・静的変数はクラスに属する値なので、値を参照するには以下のようにします

p.name = "野上"; 	// 動的。変数は [インスタンス名.変数名] で参照する。newでインスタンスを取る必要がある
Person.name = "野上";	// 静的。変数は [クラス名.変数名] で参照する。newでインスタンスを取る必要がない
===============================================================================================

・メソッドに対して static を付けるとクラスに属するメソッドになります
　静的変数にしかアクセスできなくなる
　メソッドからインスタンス変数にアクセスする必要が特にない場合には、静的メソッドにしておく方が実行効率がいい


・数学関数や数学定数などのような、インスタンスを持つ必要のない関数を定義する場合にも使います

  // sin x を求める関数（計算するだけの関数でnewして実体を持たないのでstatic）
  static double Sin(double x)
  {
    double xx = -x * x;
    double fact = 1;
    double sin = x;
    for(int i=0; i<100; ++i)
    {
      fact *= i; ++i; fact *= i; ++i;
      x *= xx;
      sin += x / fact;
    }
    return sin;
  }


・通常のコンストラクタではなく、静的コンストラクタというものを使います

 // 通常のコンストラクタ
  public Person(string name, int age)
  {
    this.name = name;
    this.age  = age;
  }

  // 静的コンストラクタ
  static Person()
  {
    Person.scientificName = "Homo sapiens";
  }

・通常のコンストラクタが新しいインスタンスが生成されるたびに呼び出されるのに対して
　静的コンストラクタはプログラムの初めに1度だけ呼び出されます

class Product // 1台ごとに固有のIDが振られるような何らかの製品クラス
{
  static Product() // スタティックコンストラクタ
  {
    // 最初に1度だけ呼ばれ、id_generator を 0 に初期化。
    id_generator = 0;
  }

  public Product() // 通常のコンストラクタ
  {
    // 新しい製品が製造されるたびに新しい id を振る。
    id = id_generator;
    id_generator++;
  }
}


・C# 1.0 では、private なコンストラクタを持つ sealed クラスとしてこのようなクラスを作成していました
　このような方法で「インスタンスが作成不可能」という制約は満たすことが出来ますが非staticなメンバーを
　定義することができてしまうという問題がありました(決してアクセスすることの出来ない無駄なメンバーになってしまいます)
　それに対してC# 2.0 ではクラス定義時にstaticをつけることで、静的メンバーしか定義できないクラスを作ることが出来ます
　このようなクラスを静的クラス（static class）と呼びます。

// スタティッククラス
// double x; というような、非staticな変数、メソッドは定義できない
static class Math
{
  // sin x を求める関数。
  static double Sin(double x)
  {
    double xx = -x * x;
    double fact = 1;
    double sin = x;
    for(int i=0; i<100; ++i)
    {
      fact *= i; ++i; fact *= i; ++i;
      x *= xx;
      sin += x / fact;
    }
    return sin;
  }
}


