http://ufcpp.net/study/csharp/sp3_lambda.html

・関数（メソッド）を整数などの変数と全く同列に扱う手法のこと
・記法としては「パラメータ => 式」となる
・匿名メソッドで出来る事は全てラムダ式でもできる
・文脈的に引数の型が明らかな場合は型推論機構が働くので省略できる

・いちいちデリゲータ書くのは面倒なのでFuncという標準デリゲータが
　用意されている
　例）int引数1つ＋bool値を返す場合のデリゲータ：Func<int, bool>
　　　int引数2つ＋int値を返す場合のデリゲータ：Func<int, int, int>


=======================================
x => x * x　←こういうヤツがラムダ式
=======================================

・=>はgoes to(ゴーズ・トゥ)と読む。
　意訳すると、「左辺のパラメータを入力して、右辺の式／文を実行する。
　戻り値が必要な場合は、その戻り値を返す」という意味

・デリゲート型または式ツリー型を作成するために使用できる匿名関数

・ラムダ式を作成するにはラムダ演算子 (=>) の左側に入力パラメーター (ある場合) を指定し
　反対側に式またはステートメント ブロックを置く
　例）x => x * x（xという名前のパラメーターを指定しxを 2 乗した値を返す）

・入力パラメーターが 2 つ以上ある場合は、かっこで囲んで各パラメーターをコンマで区切る
　例）(x, y) => x == y

・入力パラメーターがないことを指定するには空のかっこを使用する
　例）() => SomeMethod()

・ラムダ式の中身が return 文1つだけの場合には、{} や return も省略できる



=======================================================================================
delegate int del(int i);
static void Main(string[] args)
{
    del myDelegate = x => x * x;
    int j = myDelegate(5); // j = 25
}

=======================================================================================




