

============================================
ファイナライザを持つオブジェクトは2回GCしないと消えないので、
GCにかかる時間や頻度、そしてメモリ使用量を増加させる原因になる
Disposeが明示的に呼ばれた場合はSuppressFinalizeでファイナライザを無効化することが推奨されてるから
明示的にDisposすることで結果としてパフォーマンスの向上につながる

SqlConnectionは Dispose = プールに返却 だからDisposeは必須だぞ
使い終わりを検知する方法がないのにどうやって使い回してると思ってたんだ
============================================

リソースの破棄の手順 
 ※ただし、Resource はリソース管理用クラス
============================================
	Resource r = new Resource();
	try
	{
	  リソースに対する操作
	}
	finally
	{
	  if(r != null)
	    r.Dispose();
	}
============================================

リソースの破棄は必ずこの手順で行う(Disposeパターンという呼び名もついてる定型パターン）


しかし、毎回同じ手順を繰り返すのは面倒です。 
そこで、C#ではこの手順を自動的に行ってくれるusingステートメントが用意されています。
　※System.IDisposableインターフェースを実装している必要がある。

============================================
	using(Resource r = new Resource())
	{
	  リソースに対する操作
	}
============================================

using() の中身は変数宣言だけではなく、式にすることもできる。
例えば、以下のジェネリックを使ったメソッドのようにTがIDisposeを実装している時だけ
Dispose を呼び出したい場合などに便利。

============================================
	static void GenericMethod<T>(T obj)
	{
	    using (obj as IDisposable)
	    {
	       obj に対する操作
	    }
	}
============================================




