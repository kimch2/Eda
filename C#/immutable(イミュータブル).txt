JavaではString、BigDecimalはイミュータブルオブジェクト（不変オブジェクト）だから

フィールド変更できないとかいうやつか

一回作ったら中身変更できないからメソッドの引数に参照渡しとか無理よ

変更はできる　ただし、実体が変わる。同一の実体では不変これがイミュータブル

まぁ、プリミティブ型と同じように使えて　オブジェクト型と同じようには使えないと思っておけばいいよ
オブジェクト型って参照じゃない。
だから、メソッドの引数にオブジェクト型を渡した場合　本来は参照が渡るのよ

だから、メソッドの中でオブジェクトの中身を書き換えたら
メソッド出た後もその影響（俗にいう副作用）を受けるわけですよ
でも、イミュータブルなオブジェクトの場合はそれがないんですよ

メソッドの引数にString型を渡して
メソッドのの中でそのString型を変更しても
メソッドの外のStringは変わらない

実体が違うからだろ

そういうこと

オブジェクトが持っている内容に変更を加えるような操作が行われたとき
内部で自動的に別のオブジェクトを生成してそこに変更を加えた結果を設定するとともに
その自動的に作成したオブジェクトの参照を返すように動作する
だから、元のオブジェクトは変わらない（不変）

つまり、StringクラスやBigDecimalクラスはオブジェクトだから
メソッド引数に渡して中で更新すれば、戻り値として受け取れるよね！
と思っていたら、そうはうごきませんよ！！　ってこと

その場合はStringBuilderを使う
こちらも、文字列を管理するクラスだけど　こっちはミュータブル（可変）クラスだから
オブジェクト指向言語の初心者がはまりやすいところの一つなので
なんで、文字列管理がStringとStringBuilderって二つあるんだよ！！
っていうのとかの回答がこれになるわけです
副作用がない　というのはそれだけ安全なのさ

そんな時、引数がString（イミュータブル）であれば
中でどんな変更しているかわからないけど
俺が渡したこの値は　メソッドを抜けた後も絶対に安全に使える

ということが言語仕様的に保証されるわけですよ

