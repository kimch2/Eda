
〓〓〓〓〓〓〓〓〓
Time.time
〓〓〓〓〓〓〓〓〓
// ゲームが開始されてからの時間
Debug.Log(Time.time);


==============================================================
レースなどで一周の時間が図りたい場合は、
・スタートした時の時間を変数に格納しておく
・ゴールした時の時間からスタートした時間を引く
という処理をつくれば一周の時間を計算することができます。

// Startボタンが押された時の処理
function OnStart()
{
	startTime = Time.time;
}

// Goalボタンが押された時の処理
function OnGoal()
{
	lapTime = Time.time - startTime;
}
==============================================================


〓〓〓〓〓〓〓〓〓
Time.timeScale
〓〓〓〓〓〓〓〓〓
timeScale変数には時間経過の倍率が格納されています。
０〜１の間の値を代入することでゲーム全体をスローモーションにすることができます。

// スローモーション実施
Time.timeScale=0.5;


〓〓〓〓〓〓〓〓〓
Time.deltaTime
〓〓〓〓〓〓〓〓〓
deltaTime変数には前フレームが実行されてから経過した時間が格納されています。
この変数の時間を利用することでFPS(一秒間に実行されるフレーム)に依存しない処理を作ることができます。

var speed:float = 1;

function Update()
{
	transform.position.x += speed;
}
という処理があったとします。
上記の処理では毎フレームSpeed変数の分だけX座標が加算されます。

１秒間のフレーム数が30の場合と１秒間のフレーム数が60の場合を考えると
FPS30の場合 X座標は30動くのに対して
FPS60の場合 X座標は60動いてしまいます。

フレーム数はゲームを実行する端末の性能やゲーム自体のその時の負荷によって変わってきますので、
性能の高い端末などの場合にオブジェクトの移動のスピードが早くなってしまうことがわかります。

上記の処理をフレーム数に依存しないようにするには

var speed:float = 1;

function Update()
{
	transform.position.x += speed * Time.deltaTime;
}

というように speed変数にTime.deltaTime変数を掛け合わせます。

Time.deltaTime変数には前フレームから今のフレームまでの時間が入っていますので、
フレームレートが高くなっても低くなっても同様のスピードでオブジェクトを動かすことができます。


〓〓〓〓〓〓〓〓〓
StartCoroutine
〓〓〓〓〓〓〓〓〓
StartCoroutine関数を利用することで、
○秒後に処理を実行したり、○秒間隔で処理を実行するといった処理を作ることができます。

--------------------------
◆○秒後に処理を実行する
--------------------------
function Start () {
	StartCoroutine(Test());
	Debug.Log("すぐ実行される");
}

function Test()
{
	yield WaitForSeconds(3);
	
	Debug.Log("3秒後に実行される。");
}

--------------------------
◆○秒間隔で処理を実行する
--------------------------
void Start () {
	StartCoroutine(Loop());
}

private IEnumerator Loop()
{
	while (true)
	{
                yield return new WaitForSeconds(3);
		Test();
	}
}

function Test()
{
	Debug.Log("Test " + Time.time);
}
このループを止めたい場合はwhile文の条件を変更するなり
break文を実行するように処理を変更してあげましょう。









